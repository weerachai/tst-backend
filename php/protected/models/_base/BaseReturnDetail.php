<?php

/**
 * This is the model base class for the table "ReturnDetail".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ReturnDetail".
 *
 * Columns in table "ReturnDetail" available as properties of the model,
 * followed by relations of table "ReturnDetail" available as properties of the model.
 *
 * @property string $ReturnNo
 * @property string $ProductId
 * @property string $MfgDate
 * @property string $ExpDate
 * @property string $LotNo
 * @property string $OrderNo
 * @property string $Reason
 * @property string $Condition
 * @property integer $QtyLevel1
 * @property integer $QtyLevel2
 * @property integer $QtyLevel3
 * @property integer $QtyLevel4
 * @property string $PriceLevel1
 * @property string $PriceLevel2
 * @property string $PriceLevel3
 * @property string $PriceLevel4
 * @property string $UpdateAt
 *
 * @property ProductReturn $returnNo
 */
abstract class BaseReturnDetail extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'ReturnDetail';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ReturnDetail|ReturnDetails', $n);
	}

	public static function representingColumn() {
		return 'ProductId';
	}

	public function rules() {
		return array(
			array('QtyLevel1, QtyLevel2, QtyLevel3, QtyLevel4', 'numerical', 'integerOnly'=>true),
			array('ReturnNo, ProductId, LotNo, OrderNo, Reason, Condition', 'length', 'max'=>255),
			array('PriceLevel1, PriceLevel2, PriceLevel3, PriceLevel4', 'length', 'max'=>10),
			array('MfgDate, ExpDate, UpdateAt', 'safe'),
			array('ReturnNo, ProductId, MfgDate, ExpDate, LotNo, OrderNo, Reason, Condition, QtyLevel1, QtyLevel2, QtyLevel3, QtyLevel4, PriceLevel1, PriceLevel2, PriceLevel3, PriceLevel4, UpdateAt', 'default', 'setOnEmpty' => true, 'value' => null),
			array('ReturnNo, ProductId, MfgDate, ExpDate, LotNo, OrderNo, Reason, Condition, QtyLevel1, QtyLevel2, QtyLevel3, QtyLevel4, PriceLevel1, PriceLevel2, PriceLevel3, PriceLevel4, UpdateAt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'returnNo' => array(self::BELONGS_TO, 'ProductReturn', 'ReturnNo'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'ReturnNo' => null,
			'ProductId' => Yii::t('app', 'Product'),
			'MfgDate' => Yii::t('app', 'Mfg Date'),
			'ExpDate' => Yii::t('app', 'Exp Date'),
			'LotNo' => Yii::t('app', 'Lot No'),
			'OrderNo' => Yii::t('app', 'Order No'),
			'Reason' => Yii::t('app', 'Reason'),
			'Condition' => Yii::t('app', 'Condition'),
			'QtyLevel1' => Yii::t('app', 'Qty Level1'),
			'QtyLevel2' => Yii::t('app', 'Qty Level2'),
			'QtyLevel3' => Yii::t('app', 'Qty Level3'),
			'QtyLevel4' => Yii::t('app', 'Qty Level4'),
			'PriceLevel1' => Yii::t('app', 'Price Level1'),
			'PriceLevel2' => Yii::t('app', 'Price Level2'),
			'PriceLevel3' => Yii::t('app', 'Price Level3'),
			'PriceLevel4' => Yii::t('app', 'Price Level4'),
			'UpdateAt' => Yii::t('app', 'Update At'),
			'returnNo' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('ReturnNo', $this->ReturnNo);
		$criteria->compare('ProductId', $this->ProductId, true);
		$criteria->compare('MfgDate', $this->MfgDate, true);
		$criteria->compare('ExpDate', $this->ExpDate, true);
		$criteria->compare('LotNo', $this->LotNo, true);
		$criteria->compare('OrderNo', $this->OrderNo, true);
		$criteria->compare('Reason', $this->Reason, true);
		$criteria->compare('Condition', $this->Condition, true);
		$criteria->compare('QtyLevel1', $this->QtyLevel1);
		$criteria->compare('QtyLevel2', $this->QtyLevel2);
		$criteria->compare('QtyLevel3', $this->QtyLevel3);
		$criteria->compare('QtyLevel4', $this->QtyLevel4);
		$criteria->compare('PriceLevel1', $this->PriceLevel1, true);
		$criteria->compare('PriceLevel2', $this->PriceLevel2, true);
		$criteria->compare('PriceLevel3', $this->PriceLevel3, true);
		$criteria->compare('PriceLevel4', $this->PriceLevel4, true);
		$criteria->compare('UpdateAt', $this->UpdateAt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}