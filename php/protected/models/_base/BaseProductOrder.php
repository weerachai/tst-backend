<?php

/**
 * This is the model base class for the table "ProductOrder".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ProductOrder".
 *
 * Columns in table "ProductOrder" available as properties of the model,
 * followed by relations of table "ProductOrder" available as properties of the model.
 *
 * @property string $OrderNo
 * @property string $OrderType
 * @property string $SaleId
 * @property string $CustomerId
 * @property string $OrderDate
 * @property string $Total
 * @property string $Vat
 * @property string $Discount
 * @property string $Shipping
 * @property string $DeliverDate
 * @property string $DeliverAddress
 * @property string $PaymentType
 * @property string $Status
 * @property string $Remark
 * @property string $UpdateAt
 *
 * @property DiscDetail[] $discDetails
 * @property FreeDetail[] $freeDetails
 * @property OrderDetail[] $orderDetails
 */
abstract class BaseProductOrder extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'ProductOrder';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ProductOrder|ProductOrders', $n);
	}

	public static function representingColumn() {
		return 'OrderNo';
	}

	public function rules() {
		return array(
			array('OrderNo, OrderType, SaleId, CustomerId, PaymentType, Status, Remark', 'length', 'max'=>255),
			array('Total, Vat, Discount, Shipping', 'length', 'max'=>20),
			array('OrderDate, DeliverDate, DeliverAddress, UpdateAt', 'safe'),
			array('OrderNo, OrderType, SaleId, CustomerId, OrderDate, Total, Vat, Discount, Shipping, DeliverDate, DeliverAddress, PaymentType, Status, Remark, UpdateAt', 'default', 'setOnEmpty' => true, 'value' => null),
			array('OrderNo, OrderType, SaleId, CustomerId, OrderDate, Total, Vat, Discount, Shipping, DeliverDate, DeliverAddress, PaymentType, Status, Remark, UpdateAt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'discDetails' => array(self::HAS_MANY, 'DiscDetail', 'OrderNo'),
			'freeDetails' => array(self::HAS_MANY, 'FreeDetail', 'OrderNo'),
			'orderDetails' => array(self::HAS_MANY, 'OrderDetail', 'OrderNo'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'OrderNo' => Yii::t('app', 'Order No'),
			'OrderType' => Yii::t('app', 'Order Type'),
			'SaleId' => Yii::t('app', 'Sale'),
			'CustomerId' => Yii::t('app', 'Customer'),
			'OrderDate' => Yii::t('app', 'Order Date'),
			'Total' => Yii::t('app', 'Total'),
			'Vat' => Yii::t('app', 'Vat'),
			'Discount' => Yii::t('app', 'Discount'),
			'Shipping' => Yii::t('app', 'Shipping'),
			'DeliverDate' => Yii::t('app', 'Deliver Date'),
			'DeliverAddress' => Yii::t('app', 'Deliver Address'),
			'PaymentType' => Yii::t('app', 'Payment Type'),
			'Status' => Yii::t('app', 'Status'),
			'Remark' => Yii::t('app', 'Remark'),
			'UpdateAt' => Yii::t('app', 'Update At'),
			'discDetails' => null,
			'freeDetails' => null,
			'orderDetails' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('OrderNo', $this->OrderNo, true);
		$criteria->compare('OrderType', $this->OrderType, true);
		$criteria->compare('SaleId', $this->SaleId, true);
		$criteria->compare('CustomerId', $this->CustomerId, true);
		$criteria->compare('OrderDate', $this->OrderDate, true);
		$criteria->compare('Total', $this->Total, true);
		$criteria->compare('Vat', $this->Vat, true);
		$criteria->compare('Discount', $this->Discount, true);
		$criteria->compare('Shipping', $this->Shipping, true);
		$criteria->compare('DeliverDate', $this->DeliverDate, true);
		$criteria->compare('DeliverAddress', $this->DeliverAddress, true);
		$criteria->compare('PaymentType', $this->PaymentType, true);
		$criteria->compare('Status', $this->Status, true);
		$criteria->compare('Remark', $this->Remark, true);
		$criteria->compare('UpdateAt', $this->UpdateAt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}