<?php

/**
 * This is the model base class for the table "SyncLog".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SyncLog".
 *
 * Columns in table "SyncLog" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $SaleId
 * @property string $LogTime
 * @property string $Action
 * @property string $TableName
 * @property integer $NumRecords
 * @property string $Remark
 *
 */
abstract class BaseSyncLog extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'SyncLog';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SyncLog|SyncLogs', $n);
	}

	public static function representingColumn() {
		return 'SaleId';
	}

	public function rules() {
		return array(
			array('SaleId', 'required'),
			array('NumRecords', 'numerical', 'integerOnly'=>true),
			array('SaleId, Action, TableName, Remark', 'length', 'max'=>255),
			array('LogTime', 'safe'),
			array('LogTime, Action, TableName, NumRecords, Remark', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, SaleId, LogTime, Action, TableName, NumRecords, Remark', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'SaleId' => Yii::t('app', 'Sale'),
			'LogTime' => Yii::t('app', 'Log Time'),
			'Action' => Yii::t('app', 'Action'),
			'TableName' => Yii::t('app', 'Table Name'),
			'NumRecords' => Yii::t('app', 'Num Records'),
			'Remark' => Yii::t('app', 'Remark'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('SaleId', $this->SaleId, true);
		$criteria->compare('LogTime', $this->LogTime, true);
		$criteria->compare('Action', $this->Action, true);
		$criteria->compare('TableName', $this->TableName, true);
		$criteria->compare('NumRecords', $this->NumRecords);
		$criteria->compare('Remark', $this->Remark, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}