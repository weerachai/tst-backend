<?php

/**
 * This is the model base class for the table "StockCheck".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "StockCheck".
 *
 * Columns in table "StockCheck" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $SaleId
 * @property integer $Month
 * @property integer $Year
 * @property string $CustomerId
 * @property string $ProductId
 * @property integer $FrontQtyLevel1
 * @property integer $FrontQtyLevel2
 * @property integer $FrontQtyLevel3
 * @property integer $FrontQtyLevel4
 * @property integer $BackQtyLevel1
 * @property integer $BackQtyLevel2
 * @property integer $BackQtyLevel3
 * @property integer $BackQtyLevel4
 * @property integer $BuyQtyLevel1
 * @property integer $BuyQtyLevel2
 * @property integer $BuyQtyLevel3
 * @property integer $BuyQtyLevel4
 * @property string $UpdateAt
 *
 */
abstract class BaseStockCheck extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'StockCheck';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'StockCheck|StockChecks', $n);
	}

	public static function representingColumn() {
		return 'CustomerId';
	}

	public function rules() {
		return array(
			array('Month, Year', 'required'),
			array('Month, Year, FrontQtyLevel1, FrontQtyLevel2, FrontQtyLevel3, FrontQtyLevel4, BackQtyLevel1, BackQtyLevel2, BackQtyLevel3, BackQtyLevel4, BuyQtyLevel1, BuyQtyLevel2, BuyQtyLevel3, BuyQtyLevel4', 'numerical', 'integerOnly'=>true),
			array('SaleId, CustomerId, ProductId', 'length', 'max'=>255),
			array('UpdateAt', 'safe'),
			array('SaleId, CustomerId, ProductId, FrontQtyLevel1, FrontQtyLevel2, FrontQtyLevel3, FrontQtyLevel4, BackQtyLevel1, BackQtyLevel2, BackQtyLevel3, BackQtyLevel4, BuyQtyLevel1, BuyQtyLevel2, BuyQtyLevel3, BuyQtyLevel4, UpdateAt', 'default', 'setOnEmpty' => true, 'value' => null),
			array('SaleId, Month, Year, CustomerId, ProductId, FrontQtyLevel1, FrontQtyLevel2, FrontQtyLevel3, FrontQtyLevel4, BackQtyLevel1, BackQtyLevel2, BackQtyLevel3, BackQtyLevel4, BuyQtyLevel1, BuyQtyLevel2, BuyQtyLevel3, BuyQtyLevel4, UpdateAt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'SaleId' => Yii::t('app', 'Sale'),
			'Month' => Yii::t('app', 'Month'),
			'Year' => Yii::t('app', 'Year'),
			'CustomerId' => Yii::t('app', 'Customer'),
			'ProductId' => Yii::t('app', 'Product'),
			'FrontQtyLevel1' => Yii::t('app', 'Front Qty Level1'),
			'FrontQtyLevel2' => Yii::t('app', 'Front Qty Level2'),
			'FrontQtyLevel3' => Yii::t('app', 'Front Qty Level3'),
			'FrontQtyLevel4' => Yii::t('app', 'Front Qty Level4'),
			'BackQtyLevel1' => Yii::t('app', 'Back Qty Level1'),
			'BackQtyLevel2' => Yii::t('app', 'Back Qty Level2'),
			'BackQtyLevel3' => Yii::t('app', 'Back Qty Level3'),
			'BackQtyLevel4' => Yii::t('app', 'Back Qty Level4'),
			'BuyQtyLevel1' => Yii::t('app', 'Buy Qty Level1'),
			'BuyQtyLevel2' => Yii::t('app', 'Buy Qty Level2'),
			'BuyQtyLevel3' => Yii::t('app', 'Buy Qty Level3'),
			'BuyQtyLevel4' => Yii::t('app', 'Buy Qty Level4'),
			'UpdateAt' => Yii::t('app', 'Update At'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('SaleId', $this->SaleId, true);
		$criteria->compare('Month', $this->Month);
		$criteria->compare('Year', $this->Year);
		$criteria->compare('CustomerId', $this->CustomerId, true);
		$criteria->compare('ProductId', $this->ProductId, true);
		$criteria->compare('FrontQtyLevel1', $this->FrontQtyLevel1);
		$criteria->compare('FrontQtyLevel2', $this->FrontQtyLevel2);
		$criteria->compare('FrontQtyLevel3', $this->FrontQtyLevel3);
		$criteria->compare('FrontQtyLevel4', $this->FrontQtyLevel4);
		$criteria->compare('BackQtyLevel1', $this->BackQtyLevel1);
		$criteria->compare('BackQtyLevel2', $this->BackQtyLevel2);
		$criteria->compare('BackQtyLevel3', $this->BackQtyLevel3);
		$criteria->compare('BackQtyLevel4', $this->BackQtyLevel4);
		$criteria->compare('BuyQtyLevel1', $this->BuyQtyLevel1);
		$criteria->compare('BuyQtyLevel2', $this->BuyQtyLevel2);
		$criteria->compare('BuyQtyLevel3', $this->BuyQtyLevel3);
		$criteria->compare('BuyQtyLevel4', $this->BuyQtyLevel4);
		$criteria->compare('UpdateAt', $this->UpdateAt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}